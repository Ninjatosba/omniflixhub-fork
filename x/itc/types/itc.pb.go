// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: OmniFlix/itc/v1/itc.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_gogo_protobuf_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DistributionType int32

const (
	DISTRIBUTION_TYPE_INSTANT DistributionType = 0
	DISTRIBUTION_TYPE_STREAM  DistributionType = 1
)

var DistributionType_name = map[int32]string{
	0: "DISTRIBUTION_TYPE_INSTANT",
	1: "DISTRIBUTION_TYPE_STREAM",
}

var DistributionType_value = map[string]int32{
	"DISTRIBUTION_TYPE_INSTANT": 0,
	"DISTRIBUTION_TYPE_STREAM":  1,
}

func (x DistributionType) String() string {
	return proto.EnumName(DistributionType_name, int32(x))
}

func (DistributionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{0}
}

type InteractionType int32

const (
	INTERACTION_TYPE_BURN     InteractionType = 0
	INTERACTION_TYPE_TRANSFER InteractionType = 1
	INTERACTION_TYPE_HOLD     InteractionType = 2
)

var InteractionType_name = map[int32]string{
	0: "INTERACTION_TYPE_BURN",
	1: "INTERACTION_TYPE_TRANSFER",
	2: "INTERACTION_TYPE_HOLD",
}

var InteractionType_value = map[string]int32{
	"INTERACTION_TYPE_BURN":     0,
	"INTERACTION_TYPE_TRANSFER": 1,
	"INTERACTION_TYPE_HOLD":     2,
}

func (x InteractionType) String() string {
	return proto.EnumName(InteractionType_name, int32(x))
}

func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{1}
}

type CampaignStatus int32

const (
	CAMPAIGN_STATUS_UNSPECIFIED CampaignStatus = 0
	CAMPAIGN_STATUS_INACTIVE    CampaignStatus = 1
	CAMPAIGN_STATUS_ACTIVE      CampaignStatus = 2
)

var CampaignStatus_name = map[int32]string{
	0: "CAMPAIGN_STATUS_UNSPECIFIED",
	1: "CAMPAIGN_STATUS_INACTIVE",
	2: "CAMPAIGN_STATUS_ACTIVE",
}

var CampaignStatus_value = map[string]int32{
	"CAMPAIGN_STATUS_UNSPECIFIED": 0,
	"CAMPAIGN_STATUS_INACTIVE":    1,
	"CAMPAIGN_STATUS_ACTIVE":      2,
}

func (x CampaignStatus) String() string {
	return proto.EnumName(CampaignStatus_name, int32(x))
}

func (CampaignStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{2}
}

type ClaimType int32

const (
	CLAIM_TYPE_FT         ClaimType = 0
	CLAIM_TYPE_NFT        ClaimType = 1
	CLAIM_TYPE_FT_AND_NFT ClaimType = 2
)

var ClaimType_name = map[int32]string{
	0: "CLAIM_TYPE_FT",
	1: "CLAIM_TYPE_NFT",
	2: "CLAIM_TYPE_FT_AND_NFT",
}

var ClaimType_value = map[string]int32{
	"CLAIM_TYPE_FT":         0,
	"CLAIM_TYPE_NFT":        1,
	"CLAIM_TYPE_FT_AND_NFT": 2,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{3}
}

type Campaign struct {
	Id               uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime        time.Time       `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime          time.Time       `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	Creator          string          `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	NftDenomId       string          `protobuf:"bytes,7,opt,name=nft_denom_id,json=nftDenomId,proto3" json:"nft_denom_id,omitempty" yaml:"nft_denom_id"`
	MaxAllowedClaims uint64          `protobuf:"varint,8,opt,name=max_allowed_claims,json=maxAllowedClaims,proto3" json:"max_allowed_claims,omitempty" yaml:"max_allowed_claims"`
	Interaction      InteractionType `protobuf:"varint,9,opt,name=interaction,proto3,enum=OmniFlix.itc.v1.InteractionType" json:"interaction,omitempty"`
	ClaimType        ClaimType       `protobuf:"varint,10,opt,name=claim_type,json=claimType,proto3,enum=OmniFlix.itc.v1.ClaimType" json:"claim_type,omitempty"`
	TokensPerClaim   types.Coin      `protobuf:"bytes,11,opt,name=tokens_per_claim,json=tokensPerClaim,proto3" json:"tokens_per_claim" yaml:"tokens_per_claim"`
	TotalTokens      types.Coin      `protobuf:"bytes,12,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens" yaml:"total_tokens"`
	AvailableTokens  types.Coin      `protobuf:"bytes,13,opt,name=available_tokens,json=availableTokens,proto3" json:"available_tokens" yaml:"available_tokens"`
	ReceivedNftIds   []string        `protobuf:"bytes,14,rep,name=received_nft_ids,json=receivedNftIds,proto3" json:"received_nft_ids,omitempty" yaml:"received_nft_ids"`
	NftMintDetails   *NFTDetails     `protobuf:"bytes,15,opt,name=nft_mint_details,json=nftMintDetails,proto3" json:"nft_mint_details,omitempty" yaml:"nft_mint_details"`
	Distribution     *Distribution   `protobuf:"bytes,16,opt,name=distribution,proto3" json:"distribution,omitempty" yaml:"distribution"`
	MintCount        uint64          `protobuf:"varint,17,opt,name=mint_count,json=mintCount,proto3" json:"mint_count,omitempty" yaml:"mint_count"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{0}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(m, src)
}
func (m *Campaign) XXX_Size() int {
	return m.Size()
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

type Distribution struct {
	Type           DistributionType `protobuf:"varint,1,opt,name=type,proto3,enum=OmniFlix.itc.v1.DistributionType" json:"type,omitempty"`
	StreamDuration time.Duration    `protobuf:"bytes,2,opt,name=stream_duration,json=streamDuration,proto3,stdduration" json:"stream_duration"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{1}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

type NFTDetails struct {
	DenomId      string                                 `protobuf:"bytes,1,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty"`
	Name         string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MediaUri     string                                 `protobuf:"bytes,4,opt,name=media_uri,json=mediaUri,proto3" json:"media_uri,omitempty"`
	PreviewUri   string                                 `protobuf:"bytes,5,opt,name=preview_uri,json=previewUri,proto3" json:"preview_uri,omitempty"`
	RoyaltyShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=royalty_share,json=royaltyShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"royalty_share" yaml:"royalty_share"`
	Transferable bool                                   `protobuf:"varint,7,opt,name=transferable,proto3" json:"transferable,omitempty"`
	Extensible   bool                                   `protobuf:"varint,8,opt,name=extensible,proto3" json:"extensible,omitempty"`
	Nsfw         bool                                   `protobuf:"varint,9,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	Data         string                                 `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *NFTDetails) Reset()         { *m = NFTDetails{} }
func (m *NFTDetails) String() string { return proto.CompactTextString(m) }
func (*NFTDetails) ProtoMessage()    {}
func (*NFTDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{2}
}
func (m *NFTDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTDetails.Merge(m, src)
}
func (m *NFTDetails) XXX_Size() int {
	return m.Size()
}
func (m *NFTDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTDetails.DiscardUnknown(m)
}

var xxx_messageInfo_NFTDetails proto.InternalMessageInfo

type Claim struct {
	CampaignId  uint64          `protobuf:"varint,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Address     string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NftId       string          `protobuf:"bytes,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Interaction InteractionType `protobuf:"varint,4,opt,name=interaction,proto3,enum=OmniFlix.itc.v1.InteractionType" json:"interaction,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab9913014645745, []int{3}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("OmniFlix.itc.v1.DistributionType", DistributionType_name, DistributionType_value)
	proto.RegisterEnum("OmniFlix.itc.v1.InteractionType", InteractionType_name, InteractionType_value)
	proto.RegisterEnum("OmniFlix.itc.v1.CampaignStatus", CampaignStatus_name, CampaignStatus_value)
	proto.RegisterEnum("OmniFlix.itc.v1.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*Campaign)(nil), "OmniFlix.itc.v1.Campaign")
	proto.RegisterType((*Distribution)(nil), "OmniFlix.itc.v1.Distribution")
	proto.RegisterType((*NFTDetails)(nil), "OmniFlix.itc.v1.NFTDetails")
	proto.RegisterType((*Claim)(nil), "OmniFlix.itc.v1.Claim")
}

func init() { proto.RegisterFile("OmniFlix/itc/v1/itc.proto", fileDescriptor_bab9913014645745) }

var fileDescriptor_bab9913014645745 = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x15, 0x15, 0x3b, 0x91, 0xae, 0x14, 0x99, 0x99, 0x24, 0x5f, 0x68, 0xfb, 0xb3, 0xa4, 0x72,
	0x51, 0x18, 0x06, 0x4a, 0xc1, 0x69, 0xbb, 0x48, 0x77, 0xfa, 0x6d, 0x89, 0xc6, 0xb4, 0x31, 0xa2,
	0x8b, 0x26, 0x1b, 0x62, 0x44, 0x8e, 0x9c, 0x81, 0x45, 0x52, 0x20, 0x47, 0x8a, 0xbd, 0xef, 0x03,
	0x04, 0xe8, 0xa6, 0x9b, 0xbe, 0x4f, 0x96, 0x59, 0x16, 0x5d, 0xb8, 0x4d, 0xf2, 0x06, 0x46, 0x1f,
	0xa0, 0x98, 0x19, 0xd2, 0x52, 0xa4, 0xa2, 0x41, 0xb3, 0xd2, 0xdc, 0xbf, 0x73, 0x2f, 0x2f, 0x0f,
	0xcf, 0x08, 0xb6, 0x8f, 0xc3, 0x88, 0x0d, 0x26, 0xec, 0xa2, 0xc5, 0xb8, 0xdf, 0x9a, 0x1f, 0x8a,
	0x1f, 0x6b, 0x9a, 0xc4, 0x3c, 0x46, 0x5b, 0x79, 0xc8, 0x12, 0xbe, 0xf9, 0xe1, 0x4e, 0xdd, 0x8f,
	0xd3, 0x30, 0x4e, 0x5b, 0x23, 0x92, 0xd2, 0xd6, 0xfc, 0x70, 0x44, 0x39, 0x39, 0x6c, 0xf9, 0x31,
	0x8b, 0x54, 0xc1, 0xce, 0x83, 0xb3, 0xf8, 0x2c, 0x96, 0xc7, 0x96, 0x38, 0x65, 0xde, 0xc6, 0x59,
	0x1c, 0x9f, 0x4d, 0x68, 0x4b, 0x5a, 0xa3, 0xd9, 0xb8, 0xc5, 0x59, 0x48, 0x53, 0x4e, 0xc2, 0x69,
	0x96, 0x50, 0x5f, 0x4d, 0x08, 0x66, 0x09, 0xe1, 0x2c, 0xce, 0x60, 0xcd, 0x9f, 0xca, 0x50, 0xea,
	0x92, 0x70, 0x4a, 0xd8, 0x59, 0x84, 0x6a, 0x50, 0x64, 0x81, 0xa1, 0x35, 0xb5, 0xfd, 0x0d, 0x5c,
	0x64, 0x01, 0x42, 0xb0, 0x11, 0x91, 0x90, 0x1a, 0xc5, 0xa6, 0xb6, 0x5f, 0xc6, 0xf2, 0x8c, 0x9a,
	0x50, 0x09, 0x68, 0xea, 0x27, 0x6c, 0x2a, 0x50, 0x8c, 0x5b, 0x32, 0xb4, 0xec, 0x42, 0x3f, 0x02,
	0xa4, 0x9c, 0x24, 0xdc, 0x13, 0xb3, 0x18, 0x1b, 0x4d, 0x6d, 0xbf, 0xf2, 0x78, 0xc7, 0x52, 0x73,
	0x58, 0xf9, 0x1c, 0x96, 0x9b, 0x0f, 0xda, 0xd9, 0x7b, 0x7d, 0xd5, 0x28, 0x5c, 0x5f, 0x35, 0xee,
	0x5d, 0x92, 0x70, 0xf2, 0x8d, 0xb9, 0xa8, 0x35, 0x5f, 0xfd, 0xd1, 0xd0, 0x70, 0x59, 0x3a, 0x44,
	0x3a, 0xc2, 0x50, 0xa2, 0x51, 0xa0, 0x70, 0x37, 0x3f, 0x8a, 0xbb, 0x9b, 0xe1, 0x6e, 0x29, 0xdc,
	0xbc, 0x52, 0xa1, 0xde, 0xa1, 0x51, 0x20, 0x31, 0x0d, 0xb8, 0xe3, 0x27, 0x94, 0xf0, 0x38, 0x31,
	0x6e, 0xcb, 0x67, 0xc9, 0x4d, 0xf4, 0x04, 0xaa, 0xd1, 0x98, 0x7b, 0x01, 0x8d, 0xe2, 0xd0, 0x63,
	0x81, 0x71, 0x47, 0x84, 0x3b, 0x8f, 0xae, 0xaf, 0x1a, 0xf7, 0x15, 0xe2, 0x72, 0xd4, 0xc4, 0x10,
	0x8d, 0x79, 0x4f, 0x58, 0x76, 0x80, 0xbe, 0x07, 0x14, 0x92, 0x0b, 0x8f, 0x4c, 0x26, 0xf1, 0x4b,
	0x1a, 0x78, 0xfe, 0x84, 0xb0, 0x30, 0x35, 0x4a, 0x62, 0xb1, 0x9d, 0xbd, 0xeb, 0xab, 0xc6, 0xb6,
	0x02, 0x58, 0xcf, 0x31, 0xb1, 0x1e, 0x92, 0x8b, 0xb6, 0xf2, 0x75, 0xa5, 0x0b, 0x75, 0xa0, 0xc2,
	0x22, 0x4e, 0x13, 0xe2, 0xcb, 0x8d, 0x97, 0x9b, 0xda, 0x7e, 0xed, 0x71, 0xd3, 0x5a, 0x21, 0x90,
	0x65, 0x2f, 0x72, 0xdc, 0xcb, 0x29, 0xc5, 0xcb, 0x45, 0xe8, 0x09, 0x80, 0x6c, 0xe0, 0xf1, 0xcb,
	0x29, 0x35, 0x40, 0x42, 0xec, 0xac, 0x41, 0xc8, 0x86, 0xb2, 0xb8, 0xec, 0xe7, 0x47, 0x14, 0x80,
	0xce, 0xe3, 0x73, 0x1a, 0xa5, 0xde, 0x94, 0x26, 0x6a, 0x4c, 0xa3, 0x22, 0x97, 0xbf, 0x6d, 0x29,
	0xce, 0x5a, 0x82, 0xb3, 0x56, 0xc6, 0x59, 0xab, 0x1b, 0xb3, 0xa8, 0xd3, 0xc8, 0x76, 0xff, 0x48,
	0x3d, 0xe8, 0x2a, 0x80, 0x89, 0x6b, 0xca, 0x75, 0x42, 0x13, 0xd9, 0x14, 0x3d, 0x83, 0x2a, 0x8f,
	0x39, 0x99, 0x78, 0xca, 0x6f, 0x54, 0x3f, 0xd6, 0x21, 0x7f, 0xbb, 0xf7, 0xf3, 0x0e, 0x8b, 0x62,
	0x13, 0x57, 0xa4, 0xe9, 0x4a, 0x0b, 0x51, 0xd0, 0xc9, 0x9c, 0xb0, 0x09, 0x19, 0x4d, 0x68, 0x0e,
	0x7f, 0xf7, 0x3f, 0x3e, 0xc0, 0x2a, 0x80, 0x89, 0xb7, 0x6e, 0x5c, 0x59, 0x9b, 0x3e, 0xe8, 0x09,
	0xf5, 0x29, 0x9b, 0xd3, 0xc0, 0x13, 0xcc, 0x60, 0x41, 0x6a, 0xd4, 0x9a, 0xb7, 0xf6, 0xcb, 0x9d,
	0xdd, 0x05, 0xce, 0x6a, 0x86, 0x89, 0x6b, 0xb9, 0xcb, 0x19, 0x73, 0x3b, 0x48, 0xd1, 0x08, 0x74,
	0x11, 0x0b, 0x59, 0x24, 0xc8, 0xc5, 0x09, 0x9b, 0xa4, 0xc6, 0x96, 0x9c, 0x76, 0x77, 0xed, 0x7d,
	0x39, 0x03, 0xb7, 0xa7, 0x52, 0x96, 0x7b, 0xac, 0x96, 0x9b, 0xb8, 0x16, 0x8d, 0xf9, 0x11, 0x8b,
	0x78, 0x96, 0x8c, 0x9e, 0x43, 0x35, 0x60, 0x29, 0x4f, 0xd8, 0x68, 0x26, 0x29, 0xa5, 0x4b, 0xfc,
	0xbd, 0x35, 0xfc, 0xde, 0x52, 0xd2, 0x32, 0xf1, 0x97, 0x8b, 0x4d, 0xfc, 0x01, 0x16, 0xfa, 0x0a,
	0x40, 0x36, 0xf7, 0xe3, 0x59, 0xc4, 0x8d, 0x7b, 0x92, 0xf2, 0x0f, 0x17, 0x5f, 0xf7, 0x22, 0x66,
	0xe2, 0xb2, 0x30, 0xba, 0xf2, 0xfc, 0xb3, 0x06, 0xd5, 0xe5, 0x6e, 0xe8, 0x6b, 0xd8, 0x90, 0x54,
	0xd5, 0x24, 0x55, 0x3f, 0xfb, 0xd7, 0xd1, 0x24, 0x63, 0x65, 0x3a, 0x7a, 0x0a, 0x5b, 0x29, 0x4f,
	0x28, 0x09, 0xbd, 0x5c, 0xe7, 0xa4, 0x78, 0x89, 0x57, 0xbd, 0x2a, 0x14, 0xbd, 0x2c, 0xa1, 0x53,
	0x12, 0xaf, 0xfa, 0x17, 0x21, 0x0a, 0x35, 0x55, 0x9b, 0x47, 0xcc, 0xbf, 0x8a, 0x00, 0x8b, 0x1d,
	0xa3, 0x6d, 0x28, 0xdd, 0x88, 0x81, 0xa6, 0xb4, 0x22, 0xc8, 0x3e, 0xf8, 0x4f, 0x53, 0xca, 0x5d,
	0x28, 0x87, 0x34, 0x60, 0xc4, 0x9b, 0x25, 0x4c, 0x0a, 0x65, 0x19, 0x97, 0xa4, 0xe3, 0x34, 0x61,
	0xa8, 0x01, 0x95, 0x69, 0x42, 0xe7, 0x8c, 0xbe, 0x94, 0xe1, 0x4d, 0x19, 0x86, 0xcc, 0x25, 0x12,
	0xce, 0xe1, 0x6e, 0x12, 0x5f, 0x92, 0x09, 0xbf, 0xf4, 0xd2, 0x17, 0x24, 0xa1, 0x4a, 0xbf, 0x3a,
	0x03, 0xf1, 0x38, 0xbf, 0x5f, 0x35, 0x3e, 0x3f, 0x63, 0xfc, 0xc5, 0x6c, 0x64, 0xf9, 0x71, 0xd8,
	0xca, 0xee, 0x16, 0xf5, 0xf3, 0x45, 0x1a, 0x9c, 0xb7, 0xc4, 0xb6, 0x52, 0xab, 0x47, 0xfd, 0xeb,
	0xab, 0xc6, 0x83, 0x8c, 0x9b, 0xcb, 0x60, 0x26, 0xae, 0x66, 0xf6, 0x50, 0x98, 0xc8, 0x84, 0x2a,
	0x4f, 0x48, 0x94, 0x8e, 0x69, 0x22, 0x38, 0x2f, 0xc5, 0xb0, 0x84, 0x3f, 0xf0, 0xa1, 0x3a, 0x00,
	0xbd, 0xe0, 0x34, 0x4a, 0x99, 0xc8, 0x28, 0xc9, 0x8c, 0x25, 0x8f, 0x5c, 0x52, 0x3a, 0x7e, 0x29,
	0x15, 0xac, 0x84, 0xe5, 0x59, 0xf8, 0x02, 0xc2, 0x89, 0x94, 0xa4, 0x32, 0x96, 0x67, 0xf3, 0x57,
	0x0d, 0x36, 0x95, 0x2a, 0x34, 0xa0, 0xe2, 0x67, 0x97, 0x93, 0x77, 0x73, 0x33, 0x41, 0xee, 0xb2,
	0x03, 0xa1, 0xde, 0x24, 0x08, 0x12, 0x9a, 0xa6, 0xd9, 0xea, 0x73, 0x13, 0x3d, 0x84, 0xdb, 0xea,
	0x1b, 0xcb, 0x16, 0xbf, 0x19, 0x89, 0xef, 0x6b, 0x55, 0x4c, 0x37, 0x3e, 0x41, 0x4c, 0x0f, 0x8e,
	0x41, 0x5f, 0xa5, 0x1f, 0xda, 0x83, 0xed, 0x9e, 0x3d, 0x74, 0xb1, 0xdd, 0x39, 0x75, 0xed, 0x63,
	0xc7, 0x73, 0x9f, 0x9d, 0xf4, 0x3d, 0xdb, 0x19, 0xba, 0x6d, 0xc7, 0xd5, 0x0b, 0xe8, 0xff, 0x60,
	0xac, 0x87, 0x87, 0x2e, 0xee, 0xb7, 0x8f, 0x74, 0xed, 0x60, 0x0c, 0x5b, 0x2b, 0x0d, 0xd1, 0x36,
	0x3c, 0xb4, 0x1d, 0xb7, 0x8f, 0xdb, 0xdd, 0x45, 0x7e, 0xe7, 0x14, 0x3b, 0x7a, 0x41, 0xb4, 0x5a,
	0x0b, 0xb9, 0xb8, 0xed, 0x0c, 0x07, 0x7d, 0xac, 0x6b, 0xff, 0x58, 0xf9, 0xdd, 0xf1, 0xd3, 0x9e,
	0x5e, 0x3c, 0x38, 0x87, 0x5a, 0x7e, 0xd7, 0x0f, 0x39, 0xe1, 0xb3, 0x14, 0x35, 0x60, 0xb7, 0xdb,
	0x3e, 0x3a, 0x69, 0xdb, 0xdf, 0x3a, 0xde, 0xd0, 0x6d, 0xbb, 0xa7, 0x43, 0xef, 0xd4, 0x19, 0x9e,
	0xf4, 0xbb, 0xf6, 0xc0, 0xee, 0xf7, 0xd4, 0xe0, 0xab, 0x09, 0xb6, 0x23, 0xa0, 0x7f, 0xe8, 0xeb,
	0x1a, 0xda, 0x81, 0xff, 0xad, 0x46, 0xb3, 0x58, 0xf1, 0xe0, 0x08, 0xca, 0x37, 0xf7, 0x09, 0xba,
	0x07, 0x77, 0xbb, 0x4f, 0xdb, 0xf6, 0x91, 0x1a, 0x67, 0x20, 0x56, 0x82, 0xa0, 0xb6, 0xe4, 0x72,
	0x06, 0xae, 0x9a, 0xfd, 0x83, 0x34, 0xaf, 0xed, 0xf4, 0x64, 0xa8, 0xd8, 0x39, 0x79, 0xfd, 0xb6,
	0x5e, 0x78, 0xf3, 0xb6, 0x5e, 0x78, 0xfd, 0xae, 0xae, 0xbd, 0x79, 0x57, 0xd7, 0xfe, 0x7c, 0x57,
	0xd7, 0x5e, 0xbd, 0xaf, 0x17, 0xde, 0xbc, 0xaf, 0x17, 0x7e, 0x7b, 0x5f, 0x2f, 0x3c, 0xb7, 0x96,
	0x08, 0x7f, 0xf3, 0xc7, 0x2b, 0x0e, 0x23, 0x36, 0x9e, 0xb0, 0x8b, 0x17, 0xb3, 0x51, 0x6b, 0xfe,
	0xb8, 0xa5, 0xfe, 0x89, 0x49, 0xf2, 0x8f, 0x6e, 0x4b, 0x29, 0xf8, 0xf2, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x6c, 0x6a, 0x63, 0x5b, 0xa6, 0x09, 0x00, 0x00,
}

func (m *Campaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Campaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Campaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintCount != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.MintCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Distribution != nil {
		{
			size, err := m.Distribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.NftMintDetails != nil {
		{
			size, err := m.NftMintDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReceivedNftIds) > 0 {
		for iNdEx := len(m.ReceivedNftIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReceivedNftIds[iNdEx])
			copy(dAtA[i:], m.ReceivedNftIds[iNdEx])
			i = encodeVarintItc(dAtA, i, uint64(len(m.ReceivedNftIds[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size, err := m.AvailableTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintItc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.TotalTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintItc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.TokensPerClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintItc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.ClaimType != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.ClaimType))
		i--
		dAtA[i] = 0x50
	}
	if m.Interaction != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxAllowedClaims != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.MaxAllowedClaims))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NftDenomId) > 0 {
		i -= len(m.NftDenomId)
		copy(dAtA[i:], m.NftDenomId)
		i = encodeVarintItc(dAtA, i, uint64(len(m.NftDenomId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintItc(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintItc(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.StreamDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.StreamDuration):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintItc(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NFTDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x52
	}
	if m.Nsfw {
		i--
		if m.Nsfw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Extensible {
		i--
		if m.Extensible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.RoyaltyShare.Size()
		i -= size
		if _, err := m.RoyaltyShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintItc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PreviewUri) > 0 {
		i -= len(m.PreviewUri)
		copy(dAtA[i:], m.PreviewUri)
		i = encodeVarintItc(dAtA, i, uint64(len(m.PreviewUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MediaUri) > 0 {
		i -= len(m.MediaUri)
		copy(dAtA[i:], m.MediaUri)
		i = encodeVarintItc(dAtA, i, uint64(len(m.MediaUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintItc(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interaction != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintItc(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CampaignId != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintItc(dAtA []byte, offset int, v uint64) int {
	offset -= sovItc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Campaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovItc(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovItc(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovItc(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.NftDenomId)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.MaxAllowedClaims != 0 {
		n += 1 + sovItc(uint64(m.MaxAllowedClaims))
	}
	if m.Interaction != 0 {
		n += 1 + sovItc(uint64(m.Interaction))
	}
	if m.ClaimType != 0 {
		n += 1 + sovItc(uint64(m.ClaimType))
	}
	l = m.TokensPerClaim.Size()
	n += 1 + l + sovItc(uint64(l))
	l = m.TotalTokens.Size()
	n += 1 + l + sovItc(uint64(l))
	l = m.AvailableTokens.Size()
	n += 1 + l + sovItc(uint64(l))
	if len(m.ReceivedNftIds) > 0 {
		for _, s := range m.ReceivedNftIds {
			l = len(s)
			n += 1 + l + sovItc(uint64(l))
		}
	}
	if m.NftMintDetails != nil {
		l = m.NftMintDetails.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if m.Distribution != nil {
		l = m.Distribution.Size()
		n += 2 + l + sovItc(uint64(l))
	}
	if m.MintCount != 0 {
		n += 2 + sovItc(uint64(m.MintCount))
	}
	return n
}

func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovItc(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.StreamDuration)
	n += 1 + l + sovItc(uint64(l))
	return n
}

func (m *NFTDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.MediaUri)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.PreviewUri)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = m.RoyaltyShare.Size()
	n += 1 + l + sovItc(uint64(l))
	if m.Transferable {
		n += 2
	}
	if m.Extensible {
		n += 2
	}
	if m.Nsfw {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != 0 {
		n += 1 + sovItc(uint64(m.CampaignId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.Interaction != 0 {
		n += 1 + sovItc(uint64(m.Interaction))
	}
	return n
}

func sovItc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItc(x uint64) (n int) {
	return sovItc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Campaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Campaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Campaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftDenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftDenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedClaims", wireType)
			}
			m.MaxAllowedClaims = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedClaims |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= InteractionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			m.ClaimType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensPerClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensPerClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedNftIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedNftIds = append(m.ReceivedNftIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMintDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftMintDetails == nil {
				m.NftMintDetails = &NFTDetails{}
			}
			if err := m.NftMintDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Distribution == nil {
				m.Distribution = &Distribution{}
			}
			if err := m.Distribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintCount", wireType)
			}
			m.MintCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DistributionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.StreamDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoyaltyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Extensible = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsfw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nsfw = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= InteractionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItc = fmt.Errorf("proto: unexpected end of group")
)
