// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: omniflix/itc/v1/itc.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InteractionType int32

const (
	InteractionType_INTERACTION_TYPE_BURN     InteractionType = 0
	InteractionType_INTERACTION_TYPE_TRANSFER InteractionType = 1
	InteractionType_INTERACTION_TYPE_HOLD     InteractionType = 2
)

var InteractionType_name = map[int32]string{
	0: "INTERACTION_TYPE_BURN",
	1: "INTERACTION_TYPE_TRANSFER",
	2: "INTERACTION_TYPE_HOLD",
}

var InteractionType_value = map[string]int32{
	"INTERACTION_TYPE_BURN":     0,
	"INTERACTION_TYPE_TRANSFER": 1,
	"INTERACTION_TYPE_HOLD":     2,
}

func (x InteractionType) String() string {
	return proto.EnumName(InteractionType_name, int32(x))
}

func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{0}
}

type ClaimType int32

const (
	ClaimType_CLAIM_TYPE_FT         ClaimType = 0
	ClaimType_CLAIM_TYPE_NFT        ClaimType = 1
	ClaimType_CLAIM_TYPE_FT_AND_NFT ClaimType = 2
)

var ClaimType_name = map[int32]string{
	0: "CLAIM_TYPE_FT",
	1: "CLAIM_TYPE_NFT",
	2: "CLAIM_TYPE_FT_AND_NFT",
}

var ClaimType_value = map[string]int32{
	"CLAIM_TYPE_FT":         0,
	"CLAIM_TYPE_NFT":        1,
	"CLAIM_TYPE_FT_AND_NFT": 2,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{1}
}

type Claim struct {
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" yaml:"start_time"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" yaml:"end_time"`
	Creator         string                 `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Interaction     InteractionType        `protobuf:"varint,6,opt,name=interaction,proto3,enum=omniflix.itc.v1.InteractionType" json:"interaction,omitempty"`
	Type            ClaimType              `protobuf:"varint,7,opt,name=type,proto3,enum=omniflix.itc.v1.ClaimType" json:"type,omitempty"`
	ClaimableTokens *Tokens                `protobuf:"bytes,8,opt,name=claimable_tokens,json=claimableTokens,proto3" json:"claimable_tokens,omitempty" yaml:"claimable_tokens"`
	TotalTokens     *Tokens                `protobuf:"bytes,9,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty" yaml:"total_tokens"`
	AvailableTokens *Tokens                `protobuf:"bytes,10,opt,name=available_tokens,json=availableTokens,proto3" json:"available_tokens,omitempty" yaml:"available_tokens"`
	NftIds          []string               `protobuf:"bytes,11,rep,name=nft_ids,json=nftIds,proto3" json:"nft_ids,omitempty" yaml:"nft_ids"`
	NftMintDetails  *NFTDetails            `protobuf:"bytes,12,opt,name=nft_mint_details,json=nftMintDetails,proto3" json:"nft_mint_details,omitempty" yaml:"nft_mint_details"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{0}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Claim) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Claim) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Claim) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Claim) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Claim) GetInteraction() InteractionType {
	if m != nil {
		return m.Interaction
	}
	return InteractionType_INTERACTION_TYPE_BURN
}

func (m *Claim) GetType() ClaimType {
	if m != nil {
		return m.Type
	}
	return ClaimType_CLAIM_TYPE_FT
}

func (m *Claim) GetClaimableTokens() *Tokens {
	if m != nil {
		return m.ClaimableTokens
	}
	return nil
}

func (m *Claim) GetTotalTokens() *Tokens {
	if m != nil {
		return m.TotalTokens
	}
	return nil
}

func (m *Claim) GetAvailableTokens() *Tokens {
	if m != nil {
		return m.AvailableTokens
	}
	return nil
}

func (m *Claim) GetNftIds() []string {
	if m != nil {
		return m.NftIds
	}
	return nil
}

func (m *Claim) GetNftMintDetails() *NFTDetails {
	if m != nil {
		return m.NftMintDetails
	}
	return nil
}

type Tokens struct {
	Fungible    *types.Coin `protobuf:"bytes,1,opt,name=fungible,proto3" json:"fungible,omitempty"`
	NonFungible *types.Coin `protobuf:"bytes,2,opt,name=non_fungible,json=nonFungible,proto3" json:"non_fungible,omitempty"`
}

func (m *Tokens) Reset()         { *m = Tokens{} }
func (m *Tokens) String() string { return proto.CompactTextString(m) }
func (*Tokens) ProtoMessage()    {}
func (*Tokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{1}
}
func (m *Tokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tokens.Merge(m, src)
}
func (m *Tokens) XXX_Size() int {
	return m.Size()
}
func (m *Tokens) XXX_DiscardUnknown() {
	xxx_messageInfo_Tokens.DiscardUnknown(m)
}

var xxx_messageInfo_Tokens proto.InternalMessageInfo

func (m *Tokens) GetFungible() *types.Coin {
	if m != nil {
		return m.Fungible
	}
	return nil
}

func (m *Tokens) GetNonFungible() *types.Coin {
	if m != nil {
		return m.NonFungible
	}
	return nil
}

type NFTDetails struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MediaUri     string `protobuf:"bytes,4,opt,name=media_uri,json=mediaUri,proto3" json:"media_uri,omitempty"`
	PreviewUri   string `protobuf:"bytes,5,opt,name=preview_uri,json=previewUri,proto3" json:"preview_uri,omitempty"`
	RoyaltyShare string `protobuf:"bytes,6,opt,name=royalty_share,json=royaltyShare,proto3" json:"royalty_share,omitempty"`
	Transferable bool   `protobuf:"varint,7,opt,name=transferable,proto3" json:"transferable,omitempty"`
	Extensible   bool   `protobuf:"varint,8,opt,name=extensible,proto3" json:"extensible,omitempty"`
	Nsfw         bool   `protobuf:"varint,9,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
}

func (m *NFTDetails) Reset()         { *m = NFTDetails{} }
func (m *NFTDetails) String() string { return proto.CompactTextString(m) }
func (*NFTDetails) ProtoMessage()    {}
func (*NFTDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{2}
}
func (m *NFTDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTDetails.Merge(m, src)
}
func (m *NFTDetails) XXX_Size() int {
	return m.Size()
}
func (m *NFTDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTDetails.DiscardUnknown(m)
}

var xxx_messageInfo_NFTDetails proto.InternalMessageInfo

func (m *NFTDetails) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *NFTDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NFTDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NFTDetails) GetMediaUri() string {
	if m != nil {
		return m.MediaUri
	}
	return ""
}

func (m *NFTDetails) GetPreviewUri() string {
	if m != nil {
		return m.PreviewUri
	}
	return ""
}

func (m *NFTDetails) GetRoyaltyShare() string {
	if m != nil {
		return m.RoyaltyShare
	}
	return ""
}

func (m *NFTDetails) GetTransferable() bool {
	if m != nil {
		return m.Transferable
	}
	return false
}

func (m *NFTDetails) GetExtensible() bool {
	if m != nil {
		return m.Extensible
	}
	return false
}

func (m *NFTDetails) GetNsfw() bool {
	if m != nil {
		return m.Nsfw
	}
	return false
}

type ClaimRecord struct {
	ClaimId     uint64          `protobuf:"varint,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	Address     string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Interaction InteractionType `protobuf:"varint,3,opt,name=interaction,proto3,enum=omniflix.itc.v1.InteractionType" json:"interaction,omitempty"`
	Status      string          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ClaimRecord) Reset()         { *m = ClaimRecord{} }
func (m *ClaimRecord) String() string { return proto.CompactTextString(m) }
func (*ClaimRecord) ProtoMessage()    {}
func (*ClaimRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99fa199354013a9, []int{3}
}
func (m *ClaimRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRecord.Merge(m, src)
}
func (m *ClaimRecord) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRecord proto.InternalMessageInfo

func (m *ClaimRecord) GetClaimId() uint64 {
	if m != nil {
		return m.ClaimId
	}
	return 0
}

func (m *ClaimRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClaimRecord) GetInteraction() InteractionType {
	if m != nil {
		return m.Interaction
	}
	return InteractionType_INTERACTION_TYPE_BURN
}

func (m *ClaimRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterEnum("omniflix.itc.v1.InteractionType", InteractionType_name, InteractionType_value)
	proto.RegisterEnum("omniflix.itc.v1.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterType((*Claim)(nil), "omniflix.itc.v1.Claim")
	proto.RegisterType((*Tokens)(nil), "omniflix.itc.v1.Tokens")
	proto.RegisterType((*NFTDetails)(nil), "omniflix.itc.v1.NFTDetails")
	proto.RegisterType((*ClaimRecord)(nil), "omniflix.itc.v1.ClaimRecord")
}

func init() { proto.RegisterFile("omniflix/itc/v1/itc.proto", fileDescriptor_b99fa199354013a9) }

var fileDescriptor_b99fa199354013a9 = []byte{
	// 866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xb6, 0x64, 0x47, 0x3f, 0x23, 0xd9, 0x52, 0x36, 0x4d, 0x2d, 0xd9, 0xa8, 0x24, 0x30, 0x17,
	0x23, 0x01, 0x48, 0xd8, 0x45, 0x2f, 0x45, 0x2f, 0x96, 0x6d, 0xa1, 0x2a, 0x62, 0x39, 0x58, 0x33,
	0x87, 0xf6, 0x42, 0x2c, 0xc9, 0xa5, 0xbc, 0x28, 0xb9, 0x2b, 0x70, 0x57, 0x4a, 0x74, 0xe8, 0x3b,
	0xb4, 0x2f, 0xd0, 0x43, 0x9f, 0xa6, 0xc7, 0x1c, 0x7b, 0x12, 0x0a, 0xfb, 0x0d, 0xf4, 0x04, 0x05,
	0x97, 0xa4, 0xac, 0x48, 0x6d, 0x53, 0xf4, 0xe4, 0x9d, 0x6f, 0xbe, 0x6f, 0x76, 0x76, 0xac, 0x6f,
	0x08, 0x6d, 0x11, 0x71, 0x16, 0x84, 0xec, 0xbd, 0xc5, 0x94, 0x67, 0xcd, 0x4e, 0x93, 0x3f, 0xe6,
	0x24, 0x16, 0x4a, 0xa0, 0x46, 0x9e, 0x32, 0x13, 0x6c, 0x76, 0x7a, 0xd4, 0xf1, 0x84, 0x8c, 0x84,
	0xb4, 0x5c, 0x22, 0xa9, 0x35, 0x3b, 0x75, 0xa9, 0x22, 0xa7, 0x96, 0x27, 0x18, 0x4f, 0x05, 0x47,
	0x9f, 0x8d, 0xc5, 0x58, 0xe8, 0xa3, 0x95, 0x9c, 0x32, 0xb4, 0x3b, 0x16, 0x62, 0x1c, 0x52, 0x4b,
	0x47, 0xee, 0x34, 0xb0, 0x14, 0x8b, 0xa8, 0x54, 0x24, 0x9a, 0xa4, 0x04, 0xe3, 0x97, 0x12, 0x3c,
	0xb9, 0x08, 0x09, 0x8b, 0x10, 0x82, 0x3d, 0x4e, 0x22, 0xda, 0x2a, 0xf4, 0x0a, 0x27, 0x55, 0xac,
	0xcf, 0xa8, 0x07, 0x35, 0x9f, 0x4a, 0x2f, 0x66, 0x13, 0xc5, 0x04, 0x6f, 0x15, 0x75, 0x6a, 0x1d,
	0x42, 0x6f, 0x00, 0xa4, 0x22, 0xb1, 0x72, 0x92, 0xc2, 0xad, 0xdd, 0x5e, 0xe1, 0xa4, 0x76, 0x76,
	0x64, 0xa6, 0xb7, 0x9a, 0xf9, 0xad, 0xa6, 0x9d, 0xdf, 0xda, 0x7f, 0xbe, 0x5c, 0x74, 0x9f, 0xce,
	0x49, 0x14, 0x7e, 0x6d, 0x3c, 0xea, 0x0c, 0x5c, 0xd5, 0x41, 0x42, 0x43, 0xdf, 0x41, 0x85, 0x72,
	0x3f, 0xad, 0xb7, 0xf7, 0xc9, 0x7a, 0xcf, 0x96, 0x8b, 0x6e, 0x23, 0xad, 0x97, 0xab, 0x0c, 0x5c,
	0xa6, 0xdc, 0xd7, 0xb5, 0x5a, 0x50, 0xf6, 0x62, 0x4a, 0x94, 0x88, 0x5b, 0x4f, 0x74, 0xef, 0x79,
	0x88, 0xfa, 0x50, 0x63, 0x5c, 0xd1, 0x98, 0x78, 0xfa, 0x65, 0xa5, 0x5e, 0xe1, 0xe4, 0xe0, 0xac,
	0x67, 0x6e, 0x4c, 0xdd, 0x1c, 0x3e, 0x72, 0xec, 0xf9, 0x84, 0xe2, 0x75, 0x11, 0x32, 0x61, 0x4f,
	0xcd, 0x27, 0xb4, 0x55, 0xd6, 0xe2, 0xa3, 0x2d, 0xb1, 0x9e, 0xab, 0x96, 0x69, 0x1e, 0x72, 0xa0,
	0xe9, 0x25, 0x10, 0x71, 0x43, 0xea, 0x28, 0xf1, 0x23, 0xe5, 0xb2, 0x55, 0xd1, 0x2f, 0x3c, 0xdc,
	0xd2, 0xda, 0x3a, 0xdd, 0x3f, 0x5e, 0x2e, 0xba, 0x87, 0xe9, 0xf3, 0x36, 0xa5, 0x06, 0x6e, 0xac,
	0xa0, 0x94, 0x8d, 0x6e, 0xa1, 0xae, 0x84, 0x22, 0x61, 0x5e, 0xbc, 0xfa, 0xef, 0xc5, 0x0f, 0x97,
	0x8b, 0xee, 0xb3, 0xb4, 0xf8, 0xba, 0xcc, 0xc0, 0x35, 0x1d, 0x66, 0x45, 0x1d, 0x68, 0x92, 0x19,
	0x61, 0xe1, 0x7a, 0xd7, 0xf0, 0x9f, 0xbb, 0xde, 0x94, 0x1a, 0xb8, 0xb1, 0x82, 0xb2, 0x0b, 0x5e,
	0x41, 0x99, 0x07, 0xca, 0x61, 0xbe, 0x6c, 0xd5, 0x7a, 0xbb, 0x27, 0xd5, 0x3e, 0x5a, 0x2e, 0xba,
	0x07, 0xa9, 0x3c, 0x4b, 0x18, 0xb8, 0xc4, 0x03, 0x35, 0xf4, 0x25, 0x72, 0xa1, 0x99, 0x60, 0x11,
	0xe3, 0xca, 0xf1, 0xa9, 0x22, 0x2c, 0x94, 0xad, 0xba, 0xee, 0xe6, 0x78, 0xab, 0x9b, 0xd1, 0xc0,
	0xbe, 0x4c, 0x29, 0xeb, 0x1d, 0x6d, 0xca, 0x0d, 0x7c, 0xc0, 0x03, 0x75, 0xcd, 0xb8, 0xca, 0xc8,
	0xc6, 0x4f, 0x50, 0xca, 0x5a, 0xfb, 0x0a, 0x2a, 0xc1, 0x94, 0x8f, 0x99, 0x1b, 0xa6, 0xbe, 0xa8,
	0x9d, 0xb5, 0xcd, 0xd4, 0x87, 0x66, 0xe2, 0x43, 0x33, 0xf3, 0xa1, 0x79, 0x21, 0x18, 0xc7, 0x2b,
	0x2a, 0xfa, 0x06, 0xea, 0x5c, 0x70, 0x67, 0x25, 0x2d, 0x7e, 0x4a, 0x5a, 0xe3, 0x82, 0x0f, 0x32,
	0xb6, 0xf1, 0x5b, 0x11, 0xe0, 0xb1, 0x75, 0xf4, 0x02, 0xf6, 0x3d, 0x11, 0x86, 0x54, 0xff, 0xe6,
	0x1c, 0xe6, 0x67, 0x06, 0xad, 0x3f, 0x82, 0x43, 0x7f, 0x65, 0xde, 0xe2, 0x3f, 0x9b, 0x77, 0x77,
	0xdb, 0xbc, 0xc7, 0x50, 0x8d, 0xa8, 0xcf, 0x88, 0x33, 0x8d, 0x99, 0xf6, 0x5a, 0x15, 0x57, 0x34,
	0xf0, 0x36, 0x66, 0xa8, 0x0b, 0xb5, 0x49, 0x4c, 0x67, 0x8c, 0xbe, 0xd3, 0xe9, 0xd4, 0x3f, 0x90,
	0x41, 0x09, 0xe1, 0x05, 0xec, 0xc7, 0x62, 0x4e, 0x42, 0x35, 0x77, 0xe4, 0x1d, 0x89, 0xa9, 0x36,
	0x51, 0x15, 0xd7, 0x33, 0xf0, 0x36, 0xc1, 0x90, 0x01, 0x75, 0x15, 0x13, 0x2e, 0x03, 0x1a, 0x27,
	0xff, 0x72, 0xed, 0x95, 0x0a, 0xfe, 0x08, 0x43, 0x1d, 0x00, 0xfa, 0x5e, 0x51, 0x2e, 0xf5, 0xb0,
	0x2a, 0x9a, 0xb1, 0x86, 0xe8, 0xc7, 0xc9, 0xe0, 0x9d, 0xfe, 0x39, 0x57, 0xb0, 0x3e, 0x1b, 0xbf,
	0x16, 0xa0, 0xa6, 0xfd, 0x85, 0xa9, 0x27, 0x62, 0x1f, 0xb5, 0xa1, 0xa2, 0xdd, 0x90, 0x0f, 0x68,
	0x0f, 0x97, 0x75, 0x3c, 0xf4, 0x93, 0x25, 0x40, 0x7c, 0x3f, 0xa6, 0x52, 0x66, 0xe3, 0xc9, 0xc3,
	0xcd, 0x25, 0xb0, 0xfb, 0x7f, 0x96, 0xc0, 0xe7, 0x50, 0x92, 0x8a, 0xa8, 0xa9, 0xcc, 0x06, 0x98,
	0x45, 0x2f, 0x03, 0x68, 0x6c, 0xe8, 0x50, 0x1b, 0x9e, 0x0f, 0x47, 0xf6, 0x15, 0x3e, 0xbf, 0xb0,
	0x87, 0x37, 0x23, 0xc7, 0xfe, 0xfe, 0xcd, 0x95, 0xd3, 0x7f, 0x8b, 0x47, 0xcd, 0x1d, 0xf4, 0x05,
	0xb4, 0xb7, 0x52, 0x36, 0x3e, 0x1f, 0xdd, 0x0e, 0xae, 0x70, 0xb3, 0xf0, 0xb7, 0xca, 0x6f, 0x6f,
	0x5e, 0x5f, 0x36, 0x8b, 0x2f, 0xaf, 0xa1, 0xba, 0xda, 0x33, 0xe8, 0x29, 0xec, 0x5f, 0xbc, 0x3e,
	0x1f, 0x5e, 0xa7, 0x8c, 0x81, 0xdd, 0xdc, 0x41, 0x08, 0x0e, 0xd6, 0xa0, 0xd1, 0xc0, 0x4e, 0xcb,
	0x7d, 0x44, 0x73, 0xce, 0x47, 0x97, 0x3a, 0x55, 0xec, 0x5f, 0xfd, 0x7e, 0xdf, 0x29, 0x7c, 0xb8,
	0xef, 0x14, 0xfe, 0xbc, 0xef, 0x14, 0x7e, 0x7e, 0xe8, 0xec, 0x7c, 0x78, 0xe8, 0xec, 0xfc, 0xf1,
	0xd0, 0xd9, 0xf9, 0xe1, 0xd5, 0x98, 0xa9, 0xbb, 0xa9, 0x6b, 0x7a, 0x22, 0xb2, 0x6e, 0x22, 0xce,
	0x06, 0xc9, 0x77, 0x2b, 0x1f, 0xd5, 0xdd, 0xd4, 0xb5, 0xd2, 0xaf, 0x58, 0xb2, 0xe9, 0xa4, 0x5b,
	0xd2, 0xab, 0xfa, 0xcb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x8f, 0x9a, 0xde, 0xe2, 0x06,
	0x00, 0x00,
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftMintDetails != nil {
		{
			size, err := m.NftMintDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.NftIds) > 0 {
		for iNdEx := len(m.NftIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NftIds[iNdEx])
			copy(dAtA[i:], m.NftIds[iNdEx])
			i = encodeVarintItc(dAtA, i, uint64(len(m.NftIds[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.AvailableTokens != nil {
		{
			size, err := m.AvailableTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.TotalTokens != nil {
		{
			size, err := m.TotalTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ClaimableTokens != nil {
		{
			size, err := m.ClaimableTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Type != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.Interaction != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NonFungible != nil {
		{
			size, err := m.NonFungible.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Fungible != nil {
		{
			size, err := m.Fungible.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFTDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nsfw {
		i--
		if m.Nsfw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Extensible {
		i--
		if m.Extensible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.RoyaltyShare) > 0 {
		i -= len(m.RoyaltyShare)
		copy(dAtA[i:], m.RoyaltyShare)
		i = encodeVarintItc(dAtA, i, uint64(len(m.RoyaltyShare)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PreviewUri) > 0 {
		i -= len(m.PreviewUri)
		copy(dAtA[i:], m.PreviewUri)
		i = encodeVarintItc(dAtA, i, uint64(len(m.PreviewUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MediaUri) > 0 {
		i -= len(m.MediaUri)
		copy(dAtA[i:], m.MediaUri)
		i = encodeVarintItc(dAtA, i, uint64(len(m.MediaUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintItc(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.Interaction != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.Interaction))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintItc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClaimId != 0 {
		i = encodeVarintItc(dAtA, i, uint64(m.ClaimId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintItc(dAtA []byte, offset int, v uint64) int {
	offset -= sovItc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.Interaction != 0 {
		n += 1 + sovItc(uint64(m.Interaction))
	}
	if m.Type != 0 {
		n += 1 + sovItc(uint64(m.Type))
	}
	if m.ClaimableTokens != nil {
		l = m.ClaimableTokens.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if m.TotalTokens != nil {
		l = m.TotalTokens.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if m.AvailableTokens != nil {
		l = m.AvailableTokens.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if len(m.NftIds) > 0 {
		for _, s := range m.NftIds {
			l = len(s)
			n += 1 + l + sovItc(uint64(l))
		}
	}
	if m.NftMintDetails != nil {
		l = m.NftMintDetails.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	return n
}

func (m *Tokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fungible != nil {
		l = m.Fungible.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	if m.NonFungible != nil {
		l = m.NonFungible.Size()
		n += 1 + l + sovItc(uint64(l))
	}
	return n
}

func (m *NFTDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.MediaUri)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.PreviewUri)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	l = len(m.RoyaltyShare)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.Transferable {
		n += 2
	}
	if m.Extensible {
		n += 2
	}
	if m.Nsfw {
		n += 2
	}
	return n
}

func (m *ClaimRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimId != 0 {
		n += 1 + sovItc(uint64(m.ClaimId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	if m.Interaction != 0 {
		n += 1 + sovItc(uint64(m.Interaction))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovItc(uint64(l))
	}
	return n
}

func sovItc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItc(x uint64) (n int) {
	return sovItc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &timestamppb.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &timestamppb.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= InteractionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimableTokens == nil {
				m.ClaimableTokens = &Tokens{}
			}
			if err := m.ClaimableTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalTokens == nil {
				m.TotalTokens = &Tokens{}
			}
			if err := m.TotalTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableTokens == nil {
				m.AvailableTokens = &Tokens{}
			}
			if err := m.AvailableTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftIds = append(m.NftIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMintDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftMintDetails == nil {
				m.NftMintDetails = &NFTDetails{}
			}
			if err := m.NftMintDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fungible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fungible == nil {
				m.Fungible = &types.Coin{}
			}
			if err := m.Fungible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonFungible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonFungible == nil {
				m.NonFungible = &types.Coin{}
			}
			if err := m.NonFungible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoyaltyShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Extensible = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsfw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nsfw = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			m.ClaimId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			m.Interaction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interaction |= InteractionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItc = fmt.Errorf("proto: unexpected end of group")
)
